import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/cupertino.dart';
import 'package:geoflutterfire/geoflutterfire.dart';
import 'package:sevaexchange/components/calendar_events/models/kloudless_models.dart';
import 'package:sevaexchange/models/data_model.dart';
import 'package:sevaexchange/models/models.dart';

enum ProjectMode {
  TIMEBANK_PROJECT,
  MEMBER_PROJECT,
}

extension ProjectModelLabel on ProjectMode {
  String get readable {
    switch (this) {
      case ProjectMode.TIMEBANK_PROJECT:
        return 'Timebank';
      case ProjectMode.MEMBER_PROJECT:
        return 'Personal';
      default:
        return 'Timebank';
    }
  }
}

class ProjectModelList {
  final List<ProjectModel> events;
  final List<ProjectModel> completedEvents;

  ProjectModelList(this.events, this.completedEvents);
}

class ProjectModel extends DataModel {
  static const String NO_MESSAGING_ROOM_CREATED = 'NOT_YET_CREATED';
  String id;
  String name;
  String timebankId;
  String communityId;
  String description;
  String emailId;
  String phoneNumber;
  String creatorId;
  String address;
  String photoUrl;
  String cover_url;
  ProjectMode mode;
  int createdAt;
  int startTime;
  int endTime;
  GeoFirePoint location;
  List<String> members;
  List<String> pendingRequests;
  List<String> completedRequests;

  Map<String, dynamic> associatedmembers;

  bool requestedSoftDelete;
  bool softDelete;
  bool liveMode;
  String associatedMessaginfRoomId;
  bool public;
  bool virtualProject;
  List<String> timebanksPosted;
  String communityName;
  String registrationLink;

  bool isRecurring;
  List<int> recurringDays;
  int occurenceCount = 1;
  End end;
  bool autoGenerated = false;
  String parentEventId;
  List<SponsorDataModel> sponsors;

  EventMetaData eventMetaData;

  ProjectModel({
    this.parentEventId,
    this.autoGenerated,
    this.isRecurring,
    this.recurringDays,
    this.occurenceCount,
    this.end,
    this.id,
    this.name,
    this.timebankId,
    this.communityId,
    this.description,
    this.emailId,
    this.phoneNumber,
    this.creatorId,
    this.address,
    this.photoUrl,
    this.cover_url,
    this.mode,
    this.createdAt,
    this.startTime,
    this.endTime,
    this.members,
    this.location,
    this.pendingRequests,
    this.completedRequests,
    this.softDelete,
    this.requestedSoftDelete,
    this.associatedMessaginfRoomId,
    this.associatedmembers,
    this.liveMode,
    this.public,
    this.virtualProject,
    this.timebanksPosted,
    this.communityName,
    this.registrationLink,
    this.sponsors,
    this.eventMetaData,
  });

  factory ProjectModel.fromMap(Map<String, dynamic> json) => ProjectModel(
        eventMetaData: json.containsKey('eventMetaData')
            ? EventMetaData.fromMap(
                Map<String, dynamic>.from(json["eventMetaData"]),
              )
            : null,
        isRecurring: json["isRecurring"] == null ? false : json["isRecurring"],
        recurringDays: json["recurringDays"] == null
            ? null
            : List.castFrom(json['recurringDays']),
        occurenceCount:
            json["occurenceCount"] == null ? null : json["occurenceCount"],
        end: json["end"] == null
            ? null
            : End.fromMap(Map<String, dynamic>.from(json['end'])),
        autoGenerated:
            json["autoGenerated"] == null ? false : json["autoGenerated"],
        parentEventId:
            json["parentEventId"] == null ? '' : json["parentEventId"],
        id: json["id"] == null ? null : json["id"],
        name: json["name"] == null ? null : json["name"],
        public: json['public'] == null ? false : json['public'],
        virtualProject:
            json['virtualProject'] == null ? false : json['virtualProject'],
        timebankId: json["timebank_id"] == null ? null : json["timebank_id"],
        communityId: json["communityId"] == null ? null : json["communityId"],
        description: json["description"] == null ? null : json["description"],
        emailId: json["email_id"] == null ? null : json["email_id"],
        phoneNumber: json["phone_number"] == null ? null : json["phone_number"],
        creatorId: json["creator_id"] == null ? null : json["creator_id"],
        address: json["address"] == null ? null : json["address"],
        photoUrl: json["photo_url"] == null ? null : json["photo_url"],
        cover_url: json["cover_url"] == null ? null : json["cover_url"],
        registrationLink:
            json["registrationLink"] == null ? null : json["registrationLink"],
        associatedMessaginfRoomId: json["associatedMessaginfRoomId"] == null
            ? null
            : json["associatedMessaginfRoomId"],
        mode: json["mode"] == null
            ? null
            : json["mode"] == 'Timebank'
                ? ProjectMode.TIMEBANK_PROJECT
                : ProjectMode.MEMBER_PROJECT,
        createdAt: json["created_at"] == null ? null : json["created_at"],
        startTime: json["start_time"] == null ? null : json["start_time"],
        endTime: json["end_time"] == null ? null : json["end_time"],
        softDelete: json["softDelete"] == null ? false : json["softDelete"],
        liveMode: json["liveMode"] == null ? true : json["liveMode"],
        requestedSoftDelete: json["requestedSoftDelete"] == null
            ? false
            : json["requestedSoftDelete"],
        location: json.containsKey('location')
            ? json['location']['geopoint'] is GeoPoint
                ? GeoFirePoint(
                    json['location']['geopoint'].latitude,
                    json['location']['geopoint'].longitude,
                  )
                : GeoFirePoint(
                    json['location']['geopoint']['_latitude'],
                    json['location']['geopoint']['_longitude'],
                  )
            : null,
        members: json["members"] == null
            ? []
            : List<String>.from(json["members"].map((x) => x)),
        pendingRequests: json["pendingRequests"] == null
            ? []
            : List<String>.from(json["pendingRequests"].map((x) => x)),
        timebanksPosted: json["timebanksPosted"] == null
            ? []
            : List<String>.from(json["timebanksPosted"].map((x) => x)),
        completedRequests: json["completedRequests"] == null
            ? []
            : List<String>.from(
                json["completedRequests"].map((x) => x),
              ),
        associatedmembers: json["associatedmembers"] == null
            ? {}
            : Map<String, dynamic>.from(json["associatedmembers"]),
        communityName:
            json["communityName"] == null ? null : json["communityName"],
        sponsors: json.containsKey("sponsors")
            ? List<SponsorDataModel>.from(
                json["sponsors"].map((x) => SponsorDataModel.fromMap(x)))
            : [],
      );

  Map<String, dynamic> toMap() {
    var projectDetails = Map<String, dynamic>();

    projectDetails = {
      "isRecurring": isRecurring == null ? false : isRecurring,
      "recurringDays": recurringDays == null ? [] : recurringDays,
      "occurenceCount": occurenceCount == null ? 0 : occurenceCount,
      "end": end == null ? null : end.toMap(),
      "autoGenerated": autoGenerated == null ? false : autoGenerated,
      "parentEventId": parentEventId == null ? null : parentEventId,
      "id": id == null ? null : id,
      "name": name == null ? null : name,
      "timebank_id": timebankId == null ? null : timebankId,
      "communityId": communityId == null ? null : communityId,
      "public": public == null ? false : public,
      "virtualProject": virtualProject == null ? false : virtualProject,
      "description": description == null ? null : description,
      "email_id": emailId == null ? null : emailId,
      "phone_number": phoneNumber == null ? null : phoneNumber,
      "creator_id": creatorId == null ? null : creatorId,
      "address": address == null ? null : address,
      "photo_url": photoUrl == null ? null : photoUrl,
      "cover_url": cover_url == null ? null : cover_url,
      "registrationLink": registrationLink == null ? null : registrationLink,
      "mode": mode == null ? null : mode.readable,
      "created_at": createdAt == null ? null : createdAt,
      "start_time": startTime == null ? null : startTime,
      "end_time": endTime == null ? null : endTime,
      "softDelete": softDelete ?? false,
      "liveMode": liveMode ?? true,
      "requestedSoftDelete": requestedSoftDelete ?? false,
      "members":
          members == null ? null : List<dynamic>.from(members.map((x) => x)),
      "pendingRequests": pendingRequests == null
          ? null
          : List<dynamic>.from(pendingRequests.map((x) => x)),
      "timebanksPosted": timebanksPosted == null
          ? null
          : List<dynamic>.from(timebanksPosted.map((x) => x)),
      "associatedMessaginfRoomId":
          associatedMessaginfRoomId == null ? null : associatedMessaginfRoomId,
      "communityName": communityName == null ? null : communityName
    };
    if (sponsors != null && sponsors.isNotEmpty) {
      projectDetails['sponsors'] =
          List<dynamic>.from(sponsors.map((x) => x.toMap()));
    }
    if (location != null) {
      projectDetails['location'] = location?.data;
    }
    return projectDetails;
  }

  @override
  String toString() {
    return 'ProjectModel{id: $id, name: $name,registrationLink: $registrationLink,virtualProject : $virtualProject ,communityName: $communityName, timebankId: $timebankId, communityId: $communityId, description: $description, emailId: $emailId, phoneNumber: $phoneNumber,liveMode: $liveMode, creatorId: $creatorId, address: $address, photoUrl: $photoUrl, cover_url: $cover_url, mode: $mode, createdAt: $createdAt, startTime: $startTime, endTime: $endTime, location: $location, members: $members, pendingRequests: $pendingRequests, completedRequests: $completedRequests, associatedmembers: $associatedmembers, requestedSoftDelete: $requestedSoftDelete, softDelete: $softDelete, associatedMessaginfRoomId: $associatedMessaginfRoomId, public: $public, timebanksPosted: $timebanksPosted}';
  }
}
