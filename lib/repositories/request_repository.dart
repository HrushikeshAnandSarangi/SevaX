import 'dart:async';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:sevaexchange/models/request_model.dart';
import 'package:sevaexchange/utils/log_printer/log_printer.dart';

class RequestRepository {
  static CollectionReference ref = Firestore.instance.collection('requests');

  static Stream<List<RequestModel>> getAllRequestOfTimebank(
      String timebankId, String userId) async* {
    var data = ref
        .where('timebanksPosted', arrayContains: timebankId)
        .where('softDelete', isEqualTo: false)
        .where('autoGenerated', isEqualTo: false)
        // .where('accepted', isEqualTo: false)
        .orderBy("posttimestamp", descending: true)
        .snapshots();

    yield* data.transform(
      StreamTransformer<QuerySnapshot, List<RequestModel>>.fromHandlers(
        handleData: (snapshot, sink) {
          List<RequestModel> models = [];
          snapshot.documents.forEach(
            (documentSnapshot) {
              // =========================================++=======
              RequestModel model = RequestModel.fromMap(documentSnapshot.data);
              model.id = documentSnapshot.documentID;

              if (model.accepted) {
                if (model.sevaUserId == userId) {
                  models.add(model);
                }
              } else {
                if (!model.isFromOfferRequest) {
                  models.add(model);
                }
              }
            },
          );
          sink.add(models);
        },
      ),
    );
  }

  static Future<RequestModel> getRequestFutureById(
    String requestId,
  ) async {
    DocumentSnapshot document = await ref.document(requestId).get();
    return RequestModel.fromMap(document.data);
  }

  static Future<List<RequestModel>> getAllRequestsOfCommunity(
      String communityId,
      {int limit = 10}) async {
    var result = await ref
        .where("communityId", isEqualTo: communityId)
        .limit(limit)
        .getDocuments();

    List<RequestModel> models = [];
    result.documents.forEach((element) {
      models.add(RequestModel.fromMap(element.data));
    });
    return models;
  }
}
