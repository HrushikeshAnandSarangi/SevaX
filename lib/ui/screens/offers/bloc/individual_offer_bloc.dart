import 'package:rxdart/rxdart.dart';
import 'package:rxdart/subjects.dart';
import 'package:sevaexchange/components/ProfanityDetector.dart';
import 'package:sevaexchange/models/cash_model.dart';
import 'package:sevaexchange/models/models.dart';
import 'package:sevaexchange/models/user_model.dart';
import 'package:sevaexchange/ui/utils/offer_utility.dart';
import 'package:sevaexchange/ui/utils/validators.dart';
import 'package:sevaexchange/utils/bloc_provider.dart';
import 'package:sevaexchange/utils/data_managers/offers_data_manager.dart';

class IndividualOfferBloc extends BlocBase with Validators {
  bool allowedCalenderEvent = false;

  final _type = BehaviorSubject<RequestType>();
  final _title = BehaviorSubject<String>();
  final _offerDescription = BehaviorSubject<String>();
  final _availabilty = BehaviorSubject<String>();
  final _location = BehaviorSubject<CustomLocation>();
  final _status = BehaviorSubject<Status>.seeded(Status.IDLE);
  final _cashModel = BehaviorSubject<CashModel>.seeded(CashModel(
      donors: [],
      achdetails: ACHModel(),
      paymentType: RequestPaymentType.ACH,
      amountRaised: 0,
      minAmount: 0,
      targetAmount: 0));
  final _goodsDonationDetails = BehaviorSubject<GoodsDonationDetails>.seeded(
      GoodsDonationDetails(address: '', donors: [], requiredGoods: {}));

  final profanityDetector = ProfanityDetector();
  bool autoValidateText = false;

  Function(String value) get onTitleChanged => _title.sink.add;
  Function(String) get onOfferDescriptionChanged => _offerDescription.sink.add;
  Function(String) get onAvailabilityChanged => _availabilty.sink.add;
  Function(CustomLocation) get onLocatioChanged => _location.sink.add;
  Function(RequestType) get onTypeChanged => _type.sink.add;
  Function(CashModel) get onCashModelChanged => _cashModel.sink.add;
  Function(GoodsDonationDetails) get onGoodsDetailsChanged =>
      _goodsDonationDetails.sink.add;

  Stream<String> get title => _title.stream;
  Stream<String> get offerDescription => _offerDescription.stream;
  Stream<String> get availability => _availabilty.stream;
  Stream<CustomLocation> get location => _location.stream;
  Stream<Status> get status => _status.stream;
  Stream<RequestType> get type => _type.stream;
  Stream<CashModel> get cashModel => _cashModel.stream;
  Stream<GoodsDonationDetails> get goodsDonationDetails =>
      _goodsDonationDetails.stream;

  ///[Function] to create offer
  void createOrUpdateOffer({UserModel user, String timebankId}) {
    //   print(errorCheck());
    if (!errorCheck()) {
      var timestamp = DateTime.now().millisecondsSinceEpoch;
      var id = '${user.email}*$timestamp';

      IndividualOfferDataModel individualOfferDataModel =
          IndividualOfferDataModel();

      individualOfferDataModel.title = _title.value;
      individualOfferDataModel.description = _offerDescription.value;
      individualOfferDataModel.schedule = _availabilty.value;

      OfferModel offerModel = OfferModel(
          id: id,
          email: user.email,
          softDelete: false,
          fullName: user.fullname,
          sevaUserId: user.sevaUserID,
          timebankId: timebankId,
          communityId: user.currentCommunity,
          allowedCalenderUsers: allowedCalenderEvent ? [user.email] : [],
          creatorAllowedCalender: allowedCalenderEvent,
          autoGenerated: false,
          isRecurring: false,
          timestamp: DateTime.now().millisecondsSinceEpoch,
          location: _location.value == null ? null : _location.value.location,
          groupOfferDataModel: GroupOfferDataModel(),
          selectedAdrress:
              _location.value == null ? null : _location.value.address,
          individualOfferDataModel: IndividualOfferDataModel()
            ..title = _title.value
            ..description = _offerDescription.value
            ..schedule = _availabilty.value,
          offerType: OfferType.INDIVIDUAL_OFFER,
          type: _type.value,
          cashModel: _cashModel.value,
          goodsDonationDetails: _goodsDonationDetails.value);
      print('heysdfsdf');
      createOffer(offerModel: offerModel).then((_) {
        _status.add(Status.COMPLETE);
      }).catchError((e) => _status.add(Status.ERROR));
    }
  }

  ///[FUNCTION] to update offer
  void updateIndividualOffer(OfferModel offerModel) {
    OfferModel offer = offerModel;
    if (!errorCheck()) {
      offer.location = _location.value.location;
      offer.selectedAdrress = _location.value.address;
      offer.individualOfferDataModel = IndividualOfferDataModel()
        ..title = _title.value
        ..description = _offerDescription.value
        ..schedule = _availabilty.value != null ? _availabilty.value : '';

      updateOfferWithRequest(offer: offerModel).then((_) {
        _status.add(Status.COMPLETE);
      }).catchError((e) => _status.add(Status.ERROR));
    }
  }

  ///[PRELOAD DATA FOR UPDATE]
  void loadData(OfferModel offerModel) {
    _title.add(
      offerModel.individualOfferDataModel.title,
    );
    _offerDescription.add(
      offerModel.individualOfferDataModel.description,
    );
    _type.add(offerModel.type);
    _goodsDonationDetails.add(offerModel.goodsDonationDetails);
    _cashModel.add(offerModel.cashModel);
    if (offerModel.individualOfferDataModel.schedule != null) {
      _availabilty.add(
        offerModel.individualOfferDataModel.schedule,
      );
    }
    _location.add(
      CustomLocation(
        offerModel.location,
        offerModel.selectedAdrress,
      ),
    );
  }

  ///[ERROR CHECKS] TO Validate input
  bool errorCheck() {
    bool flag = false;
    if (_title.value == null || _title.value == '') {
      _title.addError(ValidationErrors.titleError);
      flag = true;
    } else if (profanityDetector.isProfaneString(_title.value)) {
      _title.addError(ValidationErrors.profanityError);
      flag = true;
    }

    if (_offerDescription.value == null || _offerDescription.value == '') {
      _offerDescription.addError(ValidationErrors.genericError);
      flag = true;
    } else if (profanityDetector.isProfaneString(_offerDescription.value)) {
      _offerDescription.addError(ValidationErrors.profanityError);
      flag = true;
    }
    if (_type.value == null && _type.value != '') {
      if (_type.value == RequestType.TIME) {
        if (_availabilty.value == null || _availabilty.value == '') {
          _availabilty.addError(ValidationErrors.genericError);
          flag = true;
        } else if (profanityDetector.isProfaneString(_availabilty.value)) {
          _availabilty.addError(ValidationErrors.profanityError);
          flag = true;
        }
      } else if (_type.value == RequestType.CASH) {
        if (_cashModel.value.targetAmount == null ||
            _cashModel.value.targetAmount == 0) {
          _cashModel.addError(ValidationErrors.emptyErrorCash);
          flag = true;
        }
      } else if (_type.value == RequestType.GOODS) {
        if (_goodsDonationDetails.value.requiredGoods == null ||
            _goodsDonationDetails.value.requiredGoods.length == 0) {
          _goodsDonationDetails.addError(ValidationErrors.emptyErrorCash);
          flag = true;
        }
      }
    }

    // if (_location.value == null) {
    //   _location.addError(ValidationErrors.genericError);
    //   flag = true;
    // }

    return flag;
  }

  @override
  void dispose() {
    _title.close();
    _offerDescription.close();
    _availabilty.close();
    _location.close();
    _status.close();
    _cashModel.close;
    _goodsDonationDetails.close();
    _type.close();
  }
}
