import 'package:geoflutterfire/geoflutterfire.dart';
import 'package:rxdart/rxdart.dart';
import 'package:rxdart/subjects.dart';
import 'package:sevaexchange/models/models.dart';
import 'package:sevaexchange/models/user_model.dart';
import 'package:sevaexchange/ui/utils/offer_utility.dart';
import 'package:sevaexchange/ui/utils/validators.dart';
import 'package:sevaexchange/utils/bloc_provider.dart';
import 'package:sevaexchange/utils/data_managers/offers_data_manager.dart';

class OneToManyOfferBloc extends BlocBase {
  int startTime;
  int endTime;
  bool autoGenerated=false;
  bool isRecurring=false;
  List<int> recurringDays = [];
  int occurenceCount;
  End end;
  String parent_offer_id;


  final _title = BehaviorSubject<String>();
  final _preparationHours = BehaviorSubject<String>();
  final _classHours = BehaviorSubject<String>();
  final _classSize = BehaviorSubject<String>();
  final _classDescription = BehaviorSubject<String>();
  final _location = BehaviorSubject<CustomLocation>();
  final _status = BehaviorSubject<Status>.seeded(Status.IDLE);
  final _classSizeError = BehaviorSubject<String>();

  Function(String value) get onTitleChanged => _title.sink.add;
  Function(String) get onPreparationHoursChanged => _preparationHours.sink.add;
  Function(String) get onClassHoursChanged => _classHours.sink.add;
  Function(String) get onClassSizeChanged => _classSize.sink.add;
  Function(String) get onclassDescriptionChanged => _classDescription.sink.add;
  Function(CustomLocation) get onLocatioChanged => _location.sink.add;
  Function(String) get onClassSizeError => _classSizeError.sink.add;

  Stream<String> get title => _title.stream;
  Stream<String> get preparationHours => _preparationHours.stream;
  Stream<String> get classHours => _classHours.stream;
  Stream<String> get classSize => _classSize.stream;
  Stream<String> get classDescription => _classDescription.stream;
  Stream<CustomLocation> get location => _location.stream;
  Stream<String> get classSizeError => _classSizeError.stream;

  Stream<Status> get status => _status.stream;

  ///[Function] to create or update offer
  void createOneToManyOffer({
    UserModel user,
    String timebankId,
  }) {
    if (!errorCheck()) {
      int prepHours = int.parse(_preparationHours.value);
      int classHours = int.parse(_classHours.value);
      int classSize = int.parse(_classSize.value);

      if (prepHours + classHours < classSize * classHours) {
        _status.add(Status.LOADING);
        var timestamp = DateTime.now().millisecondsSinceEpoch;
        var id = '${user.email}*$timestamp';
        var parent_offer_id = id;

        OfferModel offerModel = OfferModel(
          id: id,
          email: user.email,
          softDelete: false,
          fullName: user.fullname,
          sevaUserId: user.sevaUserID,
          timebankId: timebankId,
          communityId: user.currentCommunity,
          selectedAdrress:
              _location.value == null ? null : _location.value.address,
          timestamp: timestamp,
          location: _location.value == null ? null : _location.value.location,
          groupOfferDataModel: GroupOfferDataModel()
            ..classTitle = _title.value
            ..startDate = startTime
            ..endDate = endTime
            ..numberOfPreperationHours = prepHours
            ..numberOfClassHours = classHours
            ..sizeOfClass = classSize
            ..classDescription = _classDescription.value,
          individualOfferDataModel: IndividualOfferDataModel(),
          offerType: OfferType.GROUP_OFFER,
        );
        offerModel.autoGenerated = autoGenerated;
        offerModel.isRecurring = isRecurring;
        if(offerModel.isRecurring){
          offerModel.recurringDays = recurringDays;
          offerModel.end = end;
          offerModel.occurenceCount = occurenceCount;
          offerModel.parent_offer_id = parent_offer_id;
        }

        createOffer(offerModel: offerModel).then((_) {
          if(offerModel.isRecurring){
            return createRecurringEventsOffer(offerModel: offerModel);
          }
          return 1;
        }).then((_){
          _status.add(Status.COMPLETE);
        }).catchError((e) => _status.add(Status.ERROR));
      } else {
        _classSizeError.add(ValidationErrors.offerCreditError);
      }
    }
  }

  void updateOneToManyOffer(OfferModel offerModel) {
    OfferModel offer = offerModel;
    if (!errorCheck()) {

      int prepHours =
          int.parse(_preparationHours.value.replaceAll('__*__', ''));
      int classHours = int.parse(_classHours.value.replaceAll('__*__', ''));
      int classSize = int.parse(_classSize.value.replaceAll('__*__', ''));
      if (prepHours + classHours < classSize * classHours) {
        _status.add(Status.LOADING);
        offer.location = _location.value.location;
        offer.selectedAdrress = _location.value.address;
        offer.groupOfferDataModel = GroupOfferDataModel()
          ..classTitle = _title.value.replaceAll('__*__', '')
          ..startDate = startTime
          ..endDate = endTime
          ..numberOfPreperationHours = prepHours
          ..numberOfClassHours = classHours
          ..sizeOfClass = classSize
          ..classDescription = _classDescription.value.replaceAll('__*__', '');

        updateOfferWithRequest(offer: offer).then((_) {
          _status.add(Status.COMPLETE);
        }).catchError((e) => _status.add(Status.ERROR));
      } else {
        _classSizeError.add(ValidationErrors.offerCreditError);
      }
    }
  }

  ///[PRELOAD DATA FOR UPDATE]
  void loadData(OfferModel offerModel) {
    _title.add(
      offerModel.groupOfferDataModel.classTitle + '__*__',
    );
    _preparationHours.add(
      offerModel.groupOfferDataModel.numberOfPreperationHours.toString() +
          '__*__',
    );
    _classHours.add(
      offerModel.groupOfferDataModel.numberOfClassHours.toString() + '__*__',
    );
    _classSize
        .add(offerModel.groupOfferDataModel.sizeOfClass.toString() + '__*__');
    _classDescription.add(
      offerModel.groupOfferDataModel.classDescription + '__*__',
    );

    _location.add(
      CustomLocation(
        offerModel.location,
        offerModel.selectedAdrress,
      ),
    );
  }

  ///[ERROR CHECKS] TO Validate input
  bool errorCheck() {
    RegExp numberCheck = RegExp(r"^0*[1-9]\d*$");
    RegExp numberWithZeroCheck = RegExp(r"^\d+$");

    bool flag = false;
    if (_title.value == null || _title.value == '') {
      _title.addError(ValidationErrors.titleError);
      flag = true;
    }
    if (_classDescription.value == null || _classDescription.value == '') {
      _classDescription.addError(ValidationErrors.genericError);
      flag = true;
    }
    if (_classHours.value == null ||
        !numberCheck.hasMatch(_classHours.value.replaceAll('__*__', ''))) {
      _classHours.addError(ValidationErrors.classHours);
      flag = true;
    }

    if (_classSize.value == null ||
        !numberCheck.hasMatch(_classSize.value.replaceAll('__*__', ''))) {
      _classSize.addError(ValidationErrors.sizeOfClassError);
      flag = true;
    }

    if (_preparationHours.value == null ||
        !numberWithZeroCheck
            .hasMatch(_preparationHours.value.replaceAll('__*__', ''))) {
      _preparationHours.addError(
        ValidationErrors.preprationTimeError,
      );
      flag = true;
    }
    // if (_location.value == null) {
    //   _location.addError(ValidationErrors.genericError);
    //   flag = true;
    // }
    return flag;
  }

  bool checkCreditError() {
    if (!errorCheck()) {
      int prepHours = int.parse(_preparationHours.value);
      int classHours = int.parse(_classHours.value);
      int classSize = int.parse(_classSize.value);

      if (prepHours + classHours > classSize * classHours) {
        return true;
      }
    }
    return false;
  }

  @override
  void dispose() {
    _title.close();
    _classDescription.close();
    _preparationHours.close();
    _classHours.close();
    _classSize.close();
    _location.close();
    _status.close();
    _classSizeError.close();
  }
}
