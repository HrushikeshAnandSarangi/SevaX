import 'package:flutter/material.dart';
import 'package:geoflutterfire/geoflutterfire.dart';
import 'package:sevaexchange/l10n/l10n.dart';
import 'package:sevaexchange/models/models.dart';
import 'package:sevaexchange/models/offer_model.dart';
import 'package:sevaexchange/ui/screens/timebank/widgets/timebank_request_card.dart';
import 'package:sevaexchange/utils/log_printer/log_printer.dart';
import 'package:sevaexchange/views/core.dart';
import 'package:sevaexchange/utils/bloc_provider.dart';
import 'package:sevaexchange/views/timebank_modules/offer_utils.dart';
import 'package:sevaexchange/views/timebank_modules/timebank_requests.dart';
import 'package:sevaexchange/widgets/distance_from_current_location.dart';

class OfferCard extends StatelessWidget {
  final String title;
  final String subtitle;
  final String actionButtonLabel;
  final String selectedAddress;
  final int startDate;
  final OfferType offerType;
  final Function onActionPressed;
  final Function onCardPressed;
  final Color buttonColor;
  final Coordinates userCoordinates;
  final Coordinates offerCoordinates;

  final bool isCreator;
  final bool isCardVisible;

  final bool isAutoGenerated;
  final bool isRecurring;
  final RequestType type;
  final int timestamp;

  const OfferCard({
    Key key,
    this.isAutoGenerated,
    this.isRecurring,
    this.title,
    this.subtitle,
    this.offerType,
    this.onActionPressed,
    this.onCardPressed,
    this.isCreator = false,
    this.actionButtonLabel,
    this.selectedAddress,
    this.startDate,
    this.isCardVisible = false,
    this.buttonColor,
    this.type,
    this.userCoordinates,
    this.offerCoordinates,
    this.timestamp,
  })  : assert(title != null),
        assert(subtitle != null),
        assert(offerType != null),
        super(key: key);

  @override
  Widget build(BuildContext context) {
    return Offstage(
      offstage: isCardVisible,
      child: Card(
        elevation: 2,
        child: InkWell(
          onTap: onCardPressed,
          child: Padding(
            padding: const EdgeInsets.symmetric(vertical: 20, horizontal: 16),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: <Widget>[
                SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: <Widget>[
                      Row(
                        children: [
                          getOfferLocation(selectedAddress: selectedAddress) !=
                                  null
                              ? getStatsIcon(
                                  label: getOfferLocation(
                                      selectedAddress: selectedAddress),
                                  icon: Icons.location_on)
                              : Container(),
                          SizedBox(width: 10),
                          //todo pass current location and location from model
                          !isCreator
                              ? DistanceFromCurrentLocation(
                                  coordinates: offerCoordinates,
                                  currentLocation: userCoordinates,
                                  isKm: true,
                                )
                              : Container(),
                        ],
                      ),
                      Row(
                        children: [
                          Expanded(
                            child: Text(
                              title,
                              overflow: TextOverflow.ellipsis,
                              style: TextStyle(
                                color: Colors.black,
                                fontSize: 17,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          Spacer(),
                          Container(
                              margin: EdgeInsets.fromLTRB(16.0, 0.0, 16.0, 0.0),
                              child: Center(
                                child: Visibility(
                                  visible: isRecurring,
                                  child: InkWell(
                                    onTap: () {},
                                    child: Icon(Icons.navigate_next),
                                  ),
                                ),
                              )),
                        ],
                      ),
                      SizedBox(
                        height: 4,
                      ),
                      Text(
                        subtitle,
                        maxLines: 3,
                        overflow: TextOverflow.ellipsis,
                        style: Theme.of(context).textTheme.subtitle,
                      ),
                      Visibility(
                        visible: !isRecurring,
                        child: getOfferMetaData(
                          context: context,
                          startDate: startDate,
                        ),
                      ),
                      Offstage(
                        offstage: isCreator || isRecurring,
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.end,
                          children: <Widget>[
                            FlatButton(
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(20),
                              ),
                              padding: EdgeInsets.only(left: 10, right: 10),
                              color:
                                  buttonColor ?? Theme.of(context).primaryColor,
                              child: Text(
                                actionButtonLabel ?? '',
                                style: TextStyle(
                                  color: Colors.white,
                                ),
                              ),
                              onPressed: onActionPressed,
                            )
                          ],
                        ),
                      ),
                      Visibility(
                        visible: isRecurring,
                        child: Row(
                            children: [
                              SizedBox(
                                height: 30,
                              ),
                              Wrap(
                                crossAxisAlignment: WrapCrossAlignment.center,
                                children: <Widget>[
                                  getTagMainFrame("Recurring", context),
                                ],
                              ),
                              Spacer(),
//                              Text(
//                                RequestViewClassifer.getTimeInText(
//                                  postTimeStamp: timestamp,
//                                ),
//                                style: TextStyle(
//                                  color: Colors.black38,
//                                ),
//                              ),
                            ]
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget getOfferMetaData({BuildContext context, int startDate}) {
    return Container(
      margin: EdgeInsets.only(top: 5),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.start,
        // mainAxisAlignment: offerType == OfferType.GROUP_OFFER
        //     ? MainAxisAlignment.spaceBetween
        //     : MainAxisAlignment.start,
        children: <Widget>[
          offerType == OfferType.GROUP_OFFER
              ? getStatsIcon(
                  label: getFormatedTimeFromTimeStamp(
                    timeStamp: startDate,
                    timeZone: SevaCore.of(context).loggedInUser.timezone,
                  ),
                  color: Color.fromRGBO(148, 150, 241, 1.0),
                  icon: Icons.calendar_today,
                  styleVar: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w400,
                      color: Color.fromRGBO(155, 155, 155, 0.9)))
              : Offstage(),
          offerType == OfferType.GROUP_OFFER ? SizedBox(width: 18) : Offstage(),
          offerType == OfferType.GROUP_OFFER
              ? getStatsIcon(
                  label: getFormatedTimeFromTimeStamp(
                    timeStamp: startDate,
                    timeZone: SevaCore.of(context).loggedInUser.timezone,
                    format: "h:mm a",
                  ),
                  color: Color.fromRGBO(148, 150, 241, 1.0),
                  icon: Icons.access_time,
                  styleVar: TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.w400,
                      color: Color.fromRGBO(155, 155, 155, 0.9)))
              : Offstage(),
          offerType == OfferType.GROUP_OFFER ? SizedBox(width: 18) : Offstage(),
          Expanded(
              child: Row(
            children: [
              getOfferLocation(selectedAddress: selectedAddress) != null
                  ? getStatsIcon(
                      color: Color.fromRGBO(148, 150, 241, 1.0),
                      label: getOfferLocation(selectedAddress: selectedAddress),
                      icon: Icons.location_on,
                      styleVar: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w400,
                          color: Color.fromRGBO(155, 155, 155, 0.9)))
                  : Container(),
              SizedBox(width: 10),
              //todo pass current location and location from model
              !isCreator
                  ? DistanceFromCurrentLocation(
                      coordinates: offerCoordinates,
                      currentLocation: userCoordinates,
                      isKm: true,
                    )
                  : Container(),
              Spacer(),
//              Text(
//                RequestViewClassifer.getTimeInText(
//                  postTimeStamp: timestamp,
//                ),
//                style: TextStyle(
//                  color: Colors.black38,
//                ),
//              ),
            ],
          )),
          // getOfferLocation(selectedAddress: selectedAddress) != null
          //     ? getStatsIcon(
          //         label: getOfferLocation(selectedAddress: selectedAddress),
          //         icon: Icons.location_on)
          //     : Container(),
        ],
      ),
    );
  }

  Widget getAppropriateTag(RequestType requestType, BuildContext context) {
    switch (requestType) {
      case RequestType.CASH:
        return getTagMainFrame(S.of(context).cash_offer, context);

      case RequestType.GOODS:
        return getTagMainFrame(S.of(context).goods_offer, context);

      case RequestType.TIME:
        return getTagMainFrame(S.of(context).time_offer, context);

      default:
        return Container();
    }
  }

  Widget getStatsIcon(
      {String label, IconData icon, TextStyle styleVar, Color color}) {
    return Row(
      children: <Widget>[
        Icon(
          icon,
          size: 18,
          color: color,
        ),
        SizedBox(
          width: 6,
        ),
        Text(
          label.trim(),
          style: styleVar,
        ),
      ],
    );
  }
}
