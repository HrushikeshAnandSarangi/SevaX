import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:sevaexchange/components/repeat_availability/recurring_listing.dart';
import 'package:sevaexchange/globals.dart' as globals;
import 'package:sevaexchange/l10n/l10n.dart';
import 'package:sevaexchange/models/models.dart';
import 'package:sevaexchange/models/offer_model.dart';
import 'package:sevaexchange/ui/screens/home_page/bloc/home_dashboard_bloc.dart';
import 'package:sevaexchange/ui/screens/offers/pages/offer_details_router.dart';
import 'package:sevaexchange/ui/screens/offers/widgets/offer_card.dart';
import 'package:sevaexchange/ui/screens/search/bloc/queries.dart';
import 'package:sevaexchange/ui/screens/search/bloc/search_bloc.dart';
import 'package:sevaexchange/utils/app_config.dart';
import 'package:sevaexchange/utils/bloc_provider.dart';
import 'package:sevaexchange/utils/helpers/transactions_matrix_check.dart';
import 'package:sevaexchange/views/core.dart';
import 'package:sevaexchange/views/timebank_modules/offer_utils.dart';
import 'package:sevaexchange/views/timebanks/widgets/loading_indicator.dart';
import 'package:sevaexchange/widgets/custom_buttons.dart';
import 'package:url_launcher/url_launcher.dart';

import '../../../../flavor_config.dart';

class OffersTabView extends StatefulWidget {
  @override
  _OffersTabViewState createState() => _OffersTabViewState();
}

class _OffersTabViewState extends State<OffersTabView> {
  @override
  Widget build(BuildContext context) {
    final _bloc = BlocProvider.of<SearchBloc>(context);
    return Container(
      child: StreamBuilder<String>(
        stream: _bloc!.searchText,
        builder: (context, search) {
          if (search.data == null || search.data == "") {
            return Center(child: Text(S.of(context).search_something));
          }
          return StreamBuilder<List<OfferModel>>(
            stream: Searches.searchOffers(
              queryString: search.data,
              loggedInUser: _bloc.user!,
              currentCommunityOfUser: _bloc.community!,
            ),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return LoadingIndicator();
              }
              if (snapshot.data == null || snapshot.data!.isEmpty) {
                return Center(
                    child: Text(S.of(context).no_search_result_found));
              }

              //Todo UPDATE_REQUIRED
              return ListView.builder(
                padding: EdgeInsets.symmetric(horizontal: 10),
                shrinkWrap: true,
                itemCount: snapshot.data!.length,
                itemBuilder: (context, index) {
                  final offer = snapshot.data![index];
                  return OfferCard(
                    requestType: offer.type!,
                    isCardVisible: isOfferVisible(
                      offer,
                      SevaCore.of(context).loggedInUser.sevaUserID!,
                    ),
                    public: offer.public!,
                    virtual: offer.virtual!,
                    isAutoGenerated: offer.autoGenerated!,
                    isRecurring: offer.isRecurring!,
                    isCreator:
                        offer.email == SevaCore.of(context).loggedInUser.email,
                    title: getOfferTitle(offerDataModel: offer),
                    subtitle: getOfferDescription(offerDataModel: offer),
                    offerType: offer.offerType!,
                    startDate: offer!.groupOfferDataModel!.startDate!,
                    timestamp: offer!.timestamp!,
                    selectedAddress: offer.selectedAdrress!,
                    actionButtonLabel: getButtonLabel(context, offer,
                        SevaCore.of(context).loggedInUser.sevaUserID!),
                    buttonColor: (offer.type == RequestType.CASH ||
                            offer.type == RequestType.GOODS)
                        ? Theme.of(context).primaryColor
                        : isParticipant(context, offer)
                            ? Colors.grey
                            : Theme.of(context).primaryColor,
                    onCardPressed: () async {
                      if (offer.isRecurring!) {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => RecurringListing(
                                      comingFrom: ComingFrom.Offers,
                                      offerModel: offer,
                                      timebankModel: null,
                                      requestModel: null!,
                                    )));
                      } else {
                        _navigateToOfferDetails(offer);
                      }
                    },
                    onActionPressed: () async {
                      offerActions(context, offer, ComingFrom.Offers);
                    },
                  );
                },
              );
            },
          );
        },
      ),
    );
  }

  void _settingModalBottomSheet(context, OfferModel model) {
    Map<String, dynamic> stateOfcalendarCallback = {
      "email": SevaCore.of(context).loggedInUser.email,
      "mobile": globals.isMobile,
      "envName": FlavorConfig.values.envMode,
      "eventsArr": []
    };
    var stateVar = jsonEncode(stateOfcalendarCallback);
    showModalBottomSheet(
        context: context,
        builder: (BuildContext bc) {
          return Container(
            child: new Wrap(
              children: <Widget>[
                Padding(
                  padding: const EdgeInsets.fromLTRB(8, 8, 0, 8),
                  child: Text(
                    S.of(context).calendars_popup_desc,
                    style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.fromLTRB(6, 6, 6, 6),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    children: <Widget>[
                      TransactionsMatrixCheck(
                        comingFrom: ComingFrom.Offers,
                        upgradeDetails:
                            AppConfig.upgradePlanBannerModel!.calendar_sync!,
                        transaction_matrix_type: "calendar_sync",
                        child: GestureDetector(
                            child: CircleAvatar(
                              backgroundColor: Colors.white,
                              radius: 40,
                              child: Image.asset(
                                  "lib/assets/images/googlecal.png"),
                            ),
                            onTap: () async {
                              String redirectUrl =
                                  "${FlavorConfig.values.cloudFunctionBaseURL}/callbackurlforoauth";
                              String authorizationUrl =
                                  "https://api.kloudless.com/v1/oauth?client_id=B_2skRqWhNEGs6WEFv9SQIEfEfvq2E6fVg3gNBB3LiOGxgeh&response_type=code&scope=google_calendar&state=${stateVar}&redirect_uri=$redirectUrl";
                              if (await canLaunch(
                                  authorizationUrl.toString())) {
                                await launch(authorizationUrl.toString());
                              }
                              Navigator.of(bc).pop();
                            }),
                      ),
                      TransactionsMatrixCheck(
                        comingFrom: ComingFrom.Offers,
                        upgradeDetails:
                            AppConfig.upgradePlanBannerModel!.calendar_sync!,
                        transaction_matrix_type: "calendar_sync",
                        child: GestureDetector(
                            child: CircleAvatar(
                              backgroundColor: Colors.white,
                              radius: 40,
                              child: Image.asset(
                                  "lib/assets/images/outlookcal.png"),
                            ),
                            onTap: () async {
                              String redirectUrl =
                                  "${FlavorConfig.values.cloudFunctionBaseURL}/callbackurlforoauth";
                              String authorizationUrl =
                                  "https://api.kloudless.com/v1/oauth?client_id=B_2skRqWhNEGs6WEFv9SQIEfEfvq2E6fVg3gNBB3LiOGxgeh&response_type=code&scope=outlook_calendar&state=${stateVar}&redirect_uri=$redirectUrl";
                              if (await canLaunch(
                                  authorizationUrl.toString())) {
                                await launch(authorizationUrl.toString());
                              }
                              Navigator.of(bc).pop();
                            }),
                      ),
                      TransactionsMatrixCheck(
                        comingFrom: ComingFrom.Offers,
                        upgradeDetails:
                            AppConfig.upgradePlanBannerModel!.calendar_sync!,
                        transaction_matrix_type: "calendar_sync",
                        child: GestureDetector(
                            child: CircleAvatar(
                              backgroundColor: Colors.white,
                              radius: 40,
                              child: Image.asset("lib/assets/images/ical.png"),
                            ),
                            onTap: () async {
                              String redirectUrl =
                                  "${FlavorConfig.values.cloudFunctionBaseURL}/callbackurlforoauth";
                              String authorizationUrl =
                                  "https://api.kloudless.com/v1/oauth?client_id=B_2skRqWhNEGs6WEFv9SQIEfEfvq2E6fVg3gNBB3LiOGxgeh&response_type=code&scope=icloud_calendar&state=${stateVar}&redirect_uri=$redirectUrl";
                              if (await canLaunch(
                                  authorizationUrl.toString())) {
                                await launch(authorizationUrl.toString());
                              }
                              Navigator.of(bc).pop();
                            }),
                      )
                    ],
                  ),
                ),
                Row(
                  children: <Widget>[
                    Spacer(),
                    CustomTextButton(
                        shape: StadiumBorder(),
                        padding: EdgeInsets.fromLTRB(20, 5, 20, 5),
                        color: Theme.of(context).primaryColor,
                        child: Text(
                          S.of(context).skip_for_now,
                          style: TextStyle(
                              color: Colors.white, fontFamily: 'Europa'),
                        ),
                        onPressed: () {
                          Navigator.of(bc).pop();
                          offerActions(context, model, ComingFrom.Offers);
                        }),
                  ],
                )
              ],
            ),
          );
        });
  }

  void _navigateToOfferDetails(OfferModel model) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_context) => BlocProvider(
            bloc: BlocProvider.of<HomeDashBoardBloc>(context),
            child: OfferDetailsRouter(
              offerModel: model,
              comingFrom: ComingFrom.Elasticsearch,
            )),
      ),
    );
  }
}
